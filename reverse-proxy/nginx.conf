events {
    worker_connections 1024;
}

# HTTP configuration for localhost and domain proxying
http {
    # Server block for localhost (HTTP only)

    # Server block for *.management.local (HTTP)
    server {
        listen 127.0.0.1:80;
        server_name dashboard.management.local;

        location / {
            proxy_pass http://dashboard.management.local:8081;  # Istio gateway for management
            proxy_set_header Host dashboard.management.local;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Server block for *.staging.local (HTTP)
    server {
        listen 127.0.0.1:80;
        server_name *.staging.local;

        location / {
            proxy_pass http://127.0.0.1:8082;  # Istio gateway for staging
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Server block for *.prod.local (HTTP)
    server {
        listen 127.0.0.1:80;
        server_name *.prod.local;

        location / {
            proxy_pass http://127.0.0.1:8083;  # Istio gateway for production
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

# Stream configuration for HTTPS proxying based on SNI
stream {
    # Map SNI to the correct backend port
    map $ssl_preread_server_name $targetBackend {
        ~\.management\.local$ 127.0.0.1:44301;  # Management gateway HTTPS
        ~\.staging\.local$    127.0.0.1:44302;  # Staging gateway HTTPS
        ~\.prod\.local$      127.0.0.1:44303;   # Production gateway HTTPS
    }

    # Stream server for HTTPS traffic
    server {
        listen 127.0.0.1:443;
        ssl_preread on;  # Extract SNI without terminating SSL
        proxy_pass $targetBackend;
    }
}