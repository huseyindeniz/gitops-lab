events {
    worker_connections 1024;
}

http {

    # grafana_backend (HTTP)
    upstream grafana_backend {
        server localhost:3000;
    }

    # Management backends (HTTP)
    upstream management_backend_http {
        server host.docker.internal:8081;
    }

    # Static backends (HTTP)
    upstream staging_backend_http {
        server host.docker.internal:8082;
    }

    # Production backends (HTTP)
    upstream production_backend_http {
        server host.docker.internal:8083;
    }

    # grafana.local 
    server {
        listen 80;
        server_name grafana.local;

        location / {
            proxy_pass http://grafana_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Management subdomains
    server {
        listen 80;
        server_name *.management.local;

        location / {
            proxy_pass http://management_backend_http;

            # Set necessary headers for proxying
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';                    
        }
    }

    # Staging subdomains
    server {
        listen 80;
        server_name *.staging.local;

        location / {
            proxy_pass http://staging_backend_http;

            # Set necessary headers for proxying
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';                    
        }
    }

    # Production subdomains
    server {
        listen 80;
        server_name *.prod.local;

        location / {
            proxy_pass http://production_backend_http;

            # Set necessary headers for proxying
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';                    
        }
    }

    # root domain
    server {
        listen 80;
        server_name localhost;

        root /usr/share/nginx/html;  # Change this to your websiteâ€™s root folder
        index index.html;

        location / {
            try_files $uri $uri/ =404;
        }
    }

}

stream {
    # SSL passthrough for management.local
    server {
        listen 443;

        # Enable ssl_preread to inspect the SNI (Server Name Indication)
        ssl_preread on;

        # Route traffic based on subdomain
        server_name *.management.local;
        proxy_pass host.docker.internal:44301;
    }

    # SSL passthrough for staging.local
    server {
        listen 443;

        # Enable ssl_preread to inspect the SNI (Server Name Indication)
        ssl_preread on;

        # Route traffic based on subdomain
        server_name *.staging.local;
        proxy_pass host.docker.internal:44302;
    }

    # SSL passthrough for prod.local
    server {
        listen 443;

        # Enable ssl_preread to inspect the SNI (Server Name Indication)
        ssl_preread on;

        # Route traffic based on subdomain
        server_name *.prod.local;
        proxy_pass host.docker.internal:44303;
    }
}
