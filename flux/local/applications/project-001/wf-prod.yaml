apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: project-001-weather-forecast-appset-prod
  namespace: argo-cd-local
spec:
  generators:
    - list:
        elements:
          - envName: prod-bluegreen
            servicePort: 6001
            servicePreviewPort: 6002
            host: "wf-prod-bg.local"
            strategy: "bluegreen" # standard, bluegreen, canary
            imgTag: '20241114182338' # {"$imagepolicy": "flux-system:weather-forecast-prod-bluegreen-app-image-policy:tag"}
            imgMigrationTag: '20241114182250' # {"$imagepolicy": "flux-system:weather-forecast-prod-bluegreen-migration-image-policy:tag"}
            migrationAction: 'apply' # apply, reset, rollback 
            targetMigration: "" # if rollback selected, set target migration name
          - envName: prod-canary
            servicePort: 6003
            servicePreviewPort: 6004
            host: "wf-prod-canary.local"
            strategy: "canary" # standard, bluegreen, canary
            imgTag: '20241114182338' # {"$imagepolicy": "flux-system:weather-forecast-prod-bluegreen-app-image-policy:tag"}
            imgMigrationTag: '20241114182250' # {"$imagepolicy": "flux-system:weather-forecast-prod-bluegreen-migration-image-policy:tag"}
            migrationAction: 'apply' # apply, reset, rollback 
            targetMigration: "" # if rollback selected, set target migration name
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  template:
    metadata:
      name: 'weather-forecast-{{.envName}}'
    spec:
      project: default
      source:
        repoURL: https://github.com/huseyindeniz/cicd-lab.git
        targetRevision: main
        path: 'helm-charts/dotnet-core-webapi'
        helm:
          valueFiles:
            - values.yaml
            - $valuesRef/flux/local/applications/project-001/values/wf-prod-values.yaml
          valuesObject:
            environment: '{{ .envName }}'
            strategy: '{{ .strategy }}'
            service:
              port: '{{ .servicePort }}'
              previewPort: '{{ .servicePreviewPort }}'
            ingress:
              host: '{{ .host }}'
            image:
              tag: '{{ .imgTag }}'
            migration:
              tag: '{{ .imgMigrationTag }}'
              action: "{{ .migrationAction }}"
              targetMigration: '{{ .targetMigration }}'
            database:
              host: 'project-001-wf-postgres-{{ .envName }}-postgresql'
              port: "5432"
              name: 'project-001-wf-{{ .envName }}-db'
              user: 'project-001-wf-{{ .envName }}-user'
              secretName: 'postgres-password-{{ .envName }}'
              passwordKey: "POSTGRES_PASSWORD"
      destination:
        server: "https://kubernetes.default.svc"
        namespace: 'project-001-weather-forecast-{{ .envName }}' # Use the environment suffix in the namespace
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
          allowEmpty: false
        retry:
          limit: 1
        syncOptions:
          - SkipHooksOnError=true # Ensures Argo CD skips retries if a Helm hook fails
