apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: sample-dotnet-wf-staging-appset
  namespace: argocd
spec:
  generators:
    - list:
        elements:
          - envName: stag-1
            servicePort: 80
            host: "wf-stag-1.staging.local"
            hpaEnabled: "true"
            vpaEnabled: "false"
            strategy: "standard" # standard, bluegreen, canary
            imgTag: "ci-13481276849-20250223082812" # {"$imagepolicy": "flux-system:sample-dotnet-wf-staging-stag-1-image-policy:tag"}
            imgMigrationTag: "ci-13481276849-20250223082811" # {"$imagepolicy": "flux-system:sample-dotnet-wf-staging-stag-1-migration-image-policy:tag"}
            migrationAction: "apply" # apply, reset, rollback
            targetMigration: "" # if rollback selected, set target migration name
          - envName: stag-2
            servicePort: 80
            host: "wf-stag-2.staging.local"
            hpaEnabled: "false"
            vpaEnabled: "true"
            strategy: "standard" # standard, bluegreen, canary
            imgTag: "ci-13481649714-20250223091844" # {"$imagepolicy": "flux-system:sample-dotnet-wf-staging-stag-2-image-policy:tag"}
            imgMigrationTag: "ci-13481649714-20250223091843" # {"$imagepolicy": "flux-system:sample-dotnet-wf-staging-stag-2-migration-image-policy:tag"}
            migrationAction: "apply" # apply, reset, rollback
            targetMigration: "" # if rollback selected, set target migration name
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  template:
    metadata:
      name: "sample-dotnet-wf-staging-{{.envName}}"
    spec:
      project: default
      sources:
        - repoURL: https://github.com/huseyindeniz/gitops-lab.git
          targetRevision: main
          path: "helm-charts/dotnet-core-webapi"
          helm:
            valueFiles:
              - values.yaml
              - $values/flux/apps/local-staging/sample-dotnet/values/wf-values.yaml
            valuesObject:
              environment: "{{ .envName }}"
              hpa:
                enabled: {{ .hpaEnabled }}
              vpa:
                enabled: {{ .vpaEnabled }}
              strategy: "{{ .strategy }}"
              service:
                port: "{{ .servicePort }}"
              virtualService:
                enabled: true
                hosts:
                  - "{{ .host }}"
              image:
                tag: "{{ .imgTag }}"
              migration:
                tag: "{{ .imgMigrationTag }}"
                action: "{{ .migrationAction }}"
                targetMigration: "{{ .targetMigration }}"
              database:
                host: "sample-dotnet-wf-staging-{{ .envName }}-postgresql"
                port: "5432"
                name: "db_{{ .envName }}"
                user: "user_{{ .envName }}"
                secretName: "sample-dotnet-wf-staging-{{ .envName }}-postgres-password"
                passwordKey: "POSTGRES_PASSWORD"
        - repoURL: https://github.com/huseyindeniz/gitops-lab.git
          targetRevision: main
          ref: values
      destination:
        server: "https://172.17.0.5:8443"
        namespace: "sample-dotnet-wf-staging-{{ .envName }}" # Use the environment suffix in the namespace
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
          allowEmpty: false
        retry:
          limit: 1
        syncOptions:
          - SkipHooksOnError=true # Ensures Argo CD skips retries if a Helm hook fails
